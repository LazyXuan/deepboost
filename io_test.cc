/*
Copyright 2015 Google Inc. All rights reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

#include "srm_test.h"
#include "io.h"

#include "gflags/gflags.h"
#include "gtest/gtest.h"

DECLARE_string(data_set);
DECLARE_string(data_filename);
DECLARE_int32(fold_to_cv);
DECLARE_int32(fold_to_test);
DECLARE_int32(num_folds);
DECLARE_double(noise_prob);

class IoTest : public SrmTest {};

TEST_F(IoTest, SplitStringTest) {
  string text = ",,2,3,,14,,";
  vector<string> tokens;
  SplitString(text, ',', &tokens);
  EXPECT_EQ(3, tokens.size());
  EXPECT_EQ("2", tokens[0]);
  EXPECT_EQ("3", tokens[1]);
  EXPECT_EQ("14", tokens[2]);

  text = "   55 71     90 1 ";
  tokens.clear();
  SplitString(text, ' ', &tokens);
  EXPECT_EQ(4, tokens.size());
  EXPECT_EQ("55", tokens[0]);
  EXPECT_EQ("71", tokens[1]);
  EXPECT_EQ("90", tokens[2]);
  EXPECT_EQ("1", tokens[3]);
}

TEST_F(IoTest, ParseLineBreastCancerTest) {
  Example example;
  string line = "1000025,5,1,1,1,2,1,3,1,1,2";
  EXPECT_TRUE(ParseLineBreastCancer(line, &example));
  EXPECT_EQ(-1, example.label);
  EXPECT_EQ(9, example.values.size());
  // Spot check features
  EXPECT_NEAR(5, example.values[0], kTolerance);
  EXPECT_NEAR(3, example.values[6], kTolerance);
  EXPECT_NEAR(1, example.values[8], kTolerance);
  line = "1017122,8,10,10,8,7,10,9,7,1,4";
  EXPECT_TRUE(ParseLineBreastCancer(line, &example));
  EXPECT_EQ(1, example.label);
  line = "1057013,8,4,5,1,2,?,7,3,1,4";
  EXPECT_FALSE(ParseLineBreastCancer(line, &example));
}

TEST_F(IoTest, ParseLineIonTest) {
  Example example;
  string line =
      "1,0,1,-0.15899,0.72314,0.27686,0.83443,-0.58388,1,-0.28207,1,-0.49863,0."
      "79962,-0.12527,0.76837,0.14638,1,0.39337,1,0.26590,0.96354,-0.01891,0."
      "92599,-0.91338,1,0.14803,1,-0.11582,1,-0.11129,1,0.53372,1,-0.57758,g";
  EXPECT_TRUE(ParseLineIon(line, &example));
  EXPECT_EQ(1, example.label);
  EXPECT_EQ(34, example.values.size());
  // Spot check features
  EXPECT_NEAR(1, example.values[0], kTolerance);
  EXPECT_NEAR(0.83443, example.values[6], kTolerance);
  EXPECT_NEAR(-0.11129, example.values[29], kTolerance);
  line =
      "1,0,1,-0.18829,0.93035,-0.36156,-0.10868,-0.93597,1,-0.04549,0.50874,-0."
      "67743,0.34432,-0.69707,-0.51685,-0.97515,0.05499,-0.62237,0.33109,-1,-0."
      "13151,-0.45300,-0.18056,-0.35734,-0.20332,-0.26569,-0.20468,-0.18401,-0."
      "19040,-0.11593,-0.16626,-0.06288,-0.13738,-0.02447,b";
  EXPECT_TRUE(ParseLineIon(line, &example));
  EXPECT_EQ(-1, example.label);
}

TEST_F(IoTest, ParseLineGermanTest) {
  Example example;
  string line =
      "   2  48   2  60   1   3   2   2   1  22   3   1   1   1   1   0   0   "
      "1   0   0   1   0   0   1   2 ";
  EXPECT_TRUE(ParseLineGerman(line, &example));
  EXPECT_EQ(1, example.label);
  EXPECT_EQ(24, example.values.size());
  line =
      "   1   6   4  12   5   5   3   4   1  67   3   2   1   2   1   0   0   "
      "1   0   0   1   0   0   1   1 ";
  EXPECT_TRUE(ParseLineGerman(line, &example));
  EXPECT_EQ(-1, example.label);
  // Spot check features
  EXPECT_NEAR(1, example.values[0], kTolerance);
  EXPECT_NEAR(3, example.values[6], kTolerance);
  EXPECT_NEAR(1, example.values[8], kTolerance);
  EXPECT_NEAR(67, example.values[9], kTolerance);
}

TEST_F(IoTest, ParseLineOcr17Test) {
  Example example;
  string line =
      "0,0,0,3,16,11,1,0,0,0,0,8,16,16,1,0,0,0,0,9,16,14,0,0,0,1,7,16,16,11,0,"
      "0,0,9,16,16,16,8,0,0,0,1,8,6,16,7,0,0,0,0,0,5,16,9,0,0,0,0,0,2,14,14,1,"
      "0,1";
  EXPECT_TRUE(ParseLineOcr17(line, &example));
  EXPECT_EQ(-1, example.label);
  EXPECT_EQ(64, example.values.size());
  line =
      "0,0,8,15,16,13,0,0,0,1,11,9,11,16,1,0,0,0,0,0,7,14,0,0,0,0,3,4,14,12,2,"
      "0,0,1,16,16,16,16,10,0,0,2,12,16,10,0,0,0,0,0,2,16,4,0,0,0,0,0,9,14,0,0,"
      "0,0,7";
  EXPECT_TRUE(ParseLineOcr17(line, &example));
  EXPECT_EQ(1, example.label);
  // Spot check features
  EXPECT_NEAR(0, example.values[0], kTolerance);
  EXPECT_NEAR(0, example.values[6], kTolerance);
  EXPECT_NEAR(0, example.values[8], kTolerance);
  EXPECT_NEAR(9, example.values[58], kTolerance);
  line =
      "0,0,0,3,11,16,0,0,0,0,5,16,11,13,7,0,0,3,15,8,1,15,6,0,0,11,16,16,16,16,"
      "10,0,0,1,4,4,13,10,2,0,0,0,0,0,15,4,0,0,0,0,0,3,16,0,0,0,0,0,0,1,15,2,0,"
      "0,4";
  EXPECT_FALSE(ParseLineOcr17(line, &example));
}

TEST_F(IoTest, ParseLineOcr49Test) {
  Example example;
  string line =
      "0,0,0,3,11,16,0,0,0,0,5,16,11,13,7,0,0,3,15,8,1,15,6,0,0,11,16,16,16,16,"
      "10,0,0,1,4,4,13,10,2,0,0,0,0,0,15,4,0,0,0,0,0,3,16,0,0,0,0,0,0,1,15,2,0,"
      "0,4";
  EXPECT_TRUE(ParseLineOcr49(line, &example));
  EXPECT_EQ(-1, example.label);
  // Spot check features
  EXPECT_NEAR(0, example.values[0], kTolerance);
  EXPECT_NEAR(0, example.values[6], kTolerance);
  EXPECT_NEAR(0, example.values[8], kTolerance);
  EXPECT_NEAR(0, example.values[58], kTolerance);
  EXPECT_NEAR(15, example.values[60], kTolerance);
  EXPECT_EQ(64, example.values.size());
  line =
      "0,0,0,4,13,16,16,3,0,0,8,16,9,12,16,4,0,7,16,3,3,15,13,0,0,9,15,14,16,"
      "16,6,0,0,1,8,7,12,15,0,0,0,0,0,0,13,10,0,0,0,0,0,3,15,6,0,0,0,0,0,5,15,"
      "4,0,0,9";
  EXPECT_TRUE(ParseLineOcr49(line, &example));
  EXPECT_EQ(1, example.label);
  line =
      "0,0,8,15,16,13,0,0,0,1,11,9,11,16,1,0,0,0,0,0,7,14,0,0,0,0,3,4,14,12,2,"
      "0,0,1,16,16,16,16,10,0,0,2,12,16,10,0,0,0,0,0,2,16,4,0,0,0,0,0,9,14,0,0,"
      "0,0,7";
  EXPECT_FALSE(ParseLineOcr49(line, &example));
}

TEST_F(IoTest, ParseLineOcr17PrincetonTest) {
  Example example;
  string line =
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 0 0 0 0 0 0 0 1 3 3 3 3 3 3 0 0 0 0 0 "
      "0 0 3 2 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 3 2 0 0 0 0 0 0 0 0 0 0 0 2 3 0 "
      "0 0 0 0 0 0 0 0 0 0 2 3 0 0 0 0 0 0 0 0 0 0 0 1 3 0 0 0 0 0 0 0 0 0 0 0 "
      "0 3 1 0 0 0 0 0 0 0 0 0 0 0 2 2 0 0 0 0 0 0 0 0 0 0 0 1 3 0 0 0 0 0 0 0 "
      "0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 7";
  EXPECT_TRUE(ParseLineOcr17Princeton(line, &example));
  EXPECT_EQ(1, example.label);
  EXPECT_EQ(196, example.values.size());
  line =
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 "
      "0 0 0 0 0 0 0 0 0 0 0 0 1 3 0 0 0 0 0 0 0 0 0 0 0 0 1 3 0 0 0 0 0 0 0 0 "
      "0 0 0 0 2 3 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 0 "
      "0 0 0 0 0 0 0 0 0 0 3 3 0 0 0 0 0 0 0 0 0 0 0 0 3 2 0 0 0 0 0 0 0 0 0 0 "
      "0 0 3 2 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1";
  EXPECT_TRUE(ParseLineOcr17Princeton(line, &example));
  EXPECT_EQ(-1, example.label);
  // Spot check features
  EXPECT_NEAR(0, example.values[0], kTolerance);
  EXPECT_NEAR(0, example.values[6], kTolerance);
  EXPECT_NEAR(0, example.values[8], kTolerance);
  EXPECT_NEAR(3, example.values[35], kTolerance);
  line =
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 3 "
      "0 0 0 0 0 0 0 0 0 0 0 0 1 3 0 0 0 0 0 0 0 0 0 0 0 0 1 3 0 0 0 0 0 0 0 0 "
      "0 0 0 0 2 3 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 0 0 0 0 0 0 0 0 0 0 0 2 3 0 0 "
      "0 0 0 0 0 0 0 0 0 0 3 3 0 0 0 0 0 0 0 0 0 0 0 0 3 2 0 0 0 0 0 0 0 0 0 0 "
      "0 0 3 2 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4";
  EXPECT_FALSE(ParseLineOcr17Princeton(line, &example));
}

TEST_F(IoTest, ParseLineOcr49PrincetonTest) {
  Example example;
  string line =
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
      "0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 0 0 0 0 2 3 3 3 1 0 0 0 0 0 0 "
      "0 0 2 3 1 0 2 3 0 0 0 0 0 0 0 0 2 1 0 1 3 3 0 0 0 0 0 0 0 0 0 2 3 3 3 2 "
      "0 0 0 0 0 0 0 0 0 0 1 3 3 0 0 0 0 0 0 0 0 0 0 0 1 3 1 0 0 0 0 0 0 0 0 0 "
      "0 0 2 3 0 0 0 0 0 0 0 0 0 0 0 0 3 1 0 0 0 0 0 0 0 0 0 0 0 2 3 0 0 0 0 0 "
      "0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 9";
  EXPECT_TRUE(ParseLineOcr49Princeton(line, &example));
  EXPECT_EQ(1, example.label);
  EXPECT_EQ(196, example.values.size());
  line =
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 2 0 0 1 3 2 0 0 0 0 "
      "0 0 1 3 1 0 2 3 2 0 0 0 0 0 0 2 3 2 0 2 3 2 1 1 0 0 0 0 1 3 3 3 3 3 3 3 "
      "3 2 0 0 0 0 0 2 2 3 3 3 1 0 0 0 0 0 0 0 0 0 0 3 2 0 0 0 0 0 0 0 0 0 0 0 "
      "0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 4";
  EXPECT_TRUE(ParseLineOcr49Princeton(line, &example));
  EXPECT_EQ(-1, example.label);
  // Spot check features
  EXPECT_NEAR(0, example.values[0], kTolerance);
  EXPECT_NEAR(0, example.values[6], kTolerance);
  EXPECT_NEAR(0, example.values[8], kTolerance);
  EXPECT_NEAR(1, example.values[54], kTolerance);
  EXPECT_NEAR(0, example.values[58], kTolerance);
  line =
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 0 0 0 0 0 0 0 2 0 0 1 3 2 0 0 0 0 "
      "0 0 1 3 1 0 2 3 2 0 0 0 0 0 0 2 3 2 0 2 3 2 1 1 0 0 0 0 1 3 3 3 3 3 3 3 "
      "3 2 0 0 0 0 0 2 2 3 3 3 1 0 0 0 0 0 0 0 0 0 0 3 2 0 0 0 0 0 0 0 0 0 0 0 "
      "0 3 1 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 "
      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7";
  EXPECT_FALSE(ParseLineOcr49Princeton(line, &example));
}

TEST_F(IoTest, ParseLineMnist17Test) {
  Example example;
  string line =
      "7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0.3294117647058823,0.8705882352941177,0."
      "2627450980392157,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.7254901960784313,0."
      "996078431372549,0.4470588235294118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0."
      "6235294117647059,0.996078431372549,0.2823529411764706,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0.592156862745098,0.996078431372549,0.4470588235294118,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.2352941176470588,0.996078431372549,"
      "0.6392156862745098,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1411764705882353,"
      "0.9450980392156862,0.8901960784313725,0.06666666666666667,0,0,0,0,0,0,0,"
      "0,0,0,0,0.1215686274509804,0.5215686274509804,0,0,0,0,0."
      "7764705882352941,0.996078431372549,0.2588235294117647,0,0,0,0,0,0,0,0,0,"
      "0.01176470588235294,0.1490196078431373,0.8784313725490196,0."
      "996078431372549,0,0,0,0,0.7764705882352941,0.8823529411764706,0."
      "05490196078431372,0,0,0,0,0,0,0,0,0.07450980392156863,0.796078431372549,"
      "0.996078431372549,0.996078431372549,0.996078431372549,0,0,0,0,0."
      "7764705882352941,0.996078431372549,0.2627450980392157,0,0,0,0,0,0,0,0."
      "2941176470588235,0.8666666666666667,0.996078431372549,0.996078431372549,"
      "0.4509803921568628,0.203921568627451,0,0,0,0,0.7764705882352941,0."
      "996078431372549,0.2627450980392157,0,0,0,0,0,0.03529411764705882,0."
      "4941176470588236,0.984313725490196,0.996078431372549,0.8588235294117647,"
      "0.3019607843137255,0.00392156862745098,0,0,0,0,0,0.7764705882352941,0."
      "996078431372549,0.2627450980392157,0,0,0,0.2313725490196079,0."
      "5215686274509804,0.803921568627451,0.996078431372549,0.9411764705882353,"
      "0.6509803921568628,0.1372549019607843,0,0,0,0,0,0,0,0.7764705882352941,"
      "0.9803921568627451,0.2313725490196079,0,0.08627450980392157,0."
      "5058823529411764,0.9764705882352941,0.996078431372549,0."
      "9725490196078431,0.7137254901960784,0.2235294117647059,0,0,0,0,0,0,0,0,"
      "0,0.7764705882352941,0.8980392156862745,0.08235294117647059,0."
      "3254901960784314,0.9137254901960784,0.996078431372549,0.996078431372549,"
      "0.7333333333333333,0.2274509803921569,0,0,0,0,0,0,0,0,0,0,0,0."
      "7764705882352941,0.996078431372549,0.9254901960784314,0."
      "9921568627450981,1,0.9333333333333333,0.2431372549019608,0."
      "0196078431372549,0,0,0,0,0,0,0,0,0,0,0,0,0.6666666666666666,0."
      "996078431372549,0.996078431372549,0.8196078431372549,0.3254901960784314,"
      "0.1725490196078431,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.203921568627451,0."
      "5490196078431373,0.4156862745098039,0.07058823529411765,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0";
  EXPECT_TRUE(ParseLineMnist17(line, &example));
  EXPECT_EQ(1, example.label);
  EXPECT_EQ(400, example.values.size());
  line =
      "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0."
      "0392156862745098,0.0196078431372549,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0."
      "2392156862745098,0.5529411764705883,0.8431372549019608,0."
      "7764705882352941,0,0,0,0,0,0,0,0,0,0,0,0,0.09411764705882353,0."
      "4705882352941176,0.592156862745098,0.8941176470588236,0.984313725490196,"
      "0.996078431372549,0.996078431372549,0.6901960784313725,0,0,0,0,0,0,0,0,"
      "0,0.2235294117647059,0.4862745098039216,0.6705882352941176,0."
      "9098039215686274,0.996078431372549,0.996078431372549,0.996078431372549,"
      "0.996078431372549,0.803921568627451,0.4745098039215686,0."
      "0392156862745098,0,0,0,0,0,0,0.1254901960784314,0.3725490196078431,0."
      "5490196078431373,0.9294117647058824,1,0.996078431372549,0."
      "8431372549019608,0.6235294117647059,0.5568627450980392,0."
      "2588235294117647,0.2588235294117647,0.01176470588235294,0,0,0,0,0,0."
      "1764705882352941,0.3294117647058823,0.792156862745098,0.996078431372549,"
      "0.996078431372549,0.996078431372549,0.803921568627451,0."
      "6470588235294118,0.3176470588235294,0,0,0,0,0,0,0,0,0.1490196078431373,"
      "0.3411764705882353,0.5294117647058824,0.9568627450980393,0."
      "996078431372549,0.8745098039215686,0.8470588235294118,0."
      "7647058823529411,0.3019607843137255,0.03137254901960784,0,0,0,0,0,0,0,0,"
      "0,0,0.996078431372549,0.9882352941176471,0.9450980392156862,0."
      "5882352941176471,0.2470588235294118,0.04313725490196078,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0.4274509803921568,0.3215686274509804,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0";
  EXPECT_TRUE(ParseLineMnist17(line, &example));
  EXPECT_EQ(-1, example.label);
  // Spot check features
  EXPECT_NEAR(0.03921568627450980, example.values[138], kTolerance);
  EXPECT_NEAR(0.0196078431372549, example.values[139], kTolerance);
  EXPECT_NEAR(0, example.values[399], kTolerance);
  line =
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0."
      "1254901960784314,0.1450980392156863,0.1450980392156863,0."
      "1450980392156863,0.5490196078431373,0.8509803921568627,0."
      "8509803921568627,0.8509803921568627,0.8549019607843137,0."
      "4431372549019608,0.1215686274509804,0,0,0,0,0,0,0,0,0.2470588235294118,"
      "0.9058823529411765,0.984313725490196,0.984313725490196,0."
      "9921568627450981,0.984313725490196,0.984313725490196,0.984313725490196,"
      "0.984313725490196,0.9921568627450981,0.984313725490196,0."
      "9019607843137255,0.2431372549019608,0,0,0,0,0,0,0.7137254901960784,0."
      "8666666666666667,0.984313725490196,0.984313725490196,0.984313725490196,"
      "0.9921568627450981,0.984313725490196,0.984313725490196,0."
      "984313725490196,0.984313725490196,0.9921568627450981,0.984313725490196,"
      "0.984313725490196,0.5568627450980392,0,0,0,0,0.4313725490196079,0."
      "9921568627450981,1,0.9921568627450981,0.9921568627450981,0."
      "9921568627450981,0.788235294117647,0,0,0,0,0,0.2862745098039216,0."
      "9921568627450981,0.9921568627450981,0.9921568627450981,0."
      "2823529411764706,0,0,0.08235294117647059,0.7450980392156863,0."
      "984313725490196,0.9921568627450981,0.984313725490196,0.984313725490196,"
      "0.7372549019607844,0.1176470588235294,0,0,0,0,0,0.2862745098039216,0."
      "984313725490196,0.984313725490196,0.984313725490196,0.6823529411764706,"
      "0.04313725490196078,0.1450980392156863,0.7725490196078432,0."
      "984313725490196,0.984313725490196,0.9921568627450981,0.984313725490196,"
      "0.8627450980392157,0.07843137254901961,0,0,0,0,0,0,0.8941176470588236,0."
      "984313725490196,0.984313725490196,0.984313725490196,0.984313725490196,0."
      "5882352941176471,0.984313725490196,0.984313725490196,0.984313725490196,"
      "0.984313725490196,0.9921568627450981,0.984313725490196,0."
      "5372549019607843,0,0,0,0,0,0,0,0.9921568627450981,0.984313725490196,0."
      "984313725490196,0.984313725490196,0.6784313725490196,0.9921568627450981,"
      "0.984313725490196,0.984313725490196,0.984313725490196,0.984313725490196,"
      "0.9921568627450981,0.5764705882352941,0.0392156862745098,0,0,0,0,0,0,0,"
      "0.9921568627450981,0.984313725490196,0.984313725490196,0."
      "984313725490196,0.2784313725490196,0.792156862745098,0.9921568627450981,"
      "0.9921568627450981,0.9921568627450981,0.9921568627450981,0."
      "9176470588235294,0.3019607843137255,0,0,0,0,0,0,0,0.7137254901960784,1,"
      "0.9921568627450981,0.9921568627450981,0.9921568627450981,0."
      "2823529411764706,0.1215686274509804,0.4196078431372549,0."
      "4196078431372549,0.6627450980392157,0.984313725490196,0."
      "8705882352941177,0.2431372549019608,0,0,0,0,0,0.08235294117647059,0."
      "5647058823529412,0.8666666666666667,0.9921568627450981,0."
      "984313725490196,0.9019607843137255,0.4196078431372549,0."
      "1176470588235294,0,0,0,0.4274509803921568,0.984313725490196,0."
      "9921568627450981,0.5019607843137255,0.1215686274509804,0,0,0,0,0."
      "2470588235294118,0.984313725490196,0.984313725490196,0.9921568627450981,"
      "0.984313725490196,0.7411764705882353,0,0,0,0,0,0.2431372549019608,0."
      "8627450980392157,0.9921568627450981,0.984313725490196,0."
      "9019607843137255,0.4274509803921568,0.1215686274509804,0."
      "1254901960784314,0.4274509803921568,0.9058823529411765,0."
      "984313725490196,0.984313725490196,0.9921568627450981,0.984313725490196,"
      "0.1372549019607843,0,0,0,0,0,0,0.2,0.9921568627450981,0.984313725490196,"
      "0.984313725490196,0.984313725490196,0.7843137254901961,0."
      "792156862745098,0.984313725490196,0.984313725490196,0.984313725490196,0."
      "984313725490196,0.9921568627450981,0.5764705882352941,0."
      "0392156862745098,0,0,0,0,0,0,0,0,0.4117647058823529,0.9529411764705882,"
      "0.9921568627450981,0.9921568627450981,1,0.9921568627450981,0."
      "9921568627450981,0.8666666666666667,0.7058823529411765,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0.4431372549019608,0.984313725490196,0.984313725490196,0."
      "9921568627450981,0.984313725490196,0.9019607843137255,0."
      "2392156862745098,0,0,0,0,0,0,0,0,0,0,0,0,0,0.0196078431372549,0."
      "1372549019607843,0.1372549019607843,0.6431372549019608,0."
      "1372549019607843,0.1176470588235294,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0";
  EXPECT_FALSE(ParseLineMnist17(line, &example));
}

TEST_F(IoTest, ParseLineMnist49Test) {
  Example example;
  string line =
      "4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.05882352941176471,0.08627450980392157,0."
      "03529411764705882,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.3294117647058823,0."
      "6627450980392157,0.8823529411764706,0.9882352941176471,0.8,0."
      "6627450980392157,0.1607843137254902,0,0,0,0,0,0,0,0,0,0,0,0."
      "1764705882352941,0.6588235294117647,0.9490196078431372,0."
      "9882352941176471,0.9882352941176471,0.6431372549019608,0."
      "8196078431372549,0.9882352941176471,0.6666666666666666,0,0,0,0,0,0,0,0,"
      "0,0.01568627450980392,0.2705882352941176,0.9254901960784314,0."
      "9686274509803922,0.8274509803921568,0.4156862745098039,0,0,0."
      "07058823529411765,0.7803921568627451,0.9607843137254902,0."
      "1921568627450981,0,0,0,0,0,0,0.196078431372549,0.4745098039215686,0."
      "7647058823529411,0.9882352941176471,0.8509803921568627,0."
      "207843137254902,0,0,0,0,0,0.3333333333333333,0.9882352941176471,0."
      "3294117647058823,0,0,0,0,0,0,0.8784313725490196,0.9058823529411765,0."
      "9058823529411765,0.5254901960784314,0.04705882352941176,0,0,0,0,0,0,0."
      "3333333333333333,0.9882352941176471,0.3294117647058823,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0.3333333333333333,0.9882352941176471,0."
      "3294117647058823,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.3333333333333333,0."
      "9882352941176471,0.3294117647058823,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0."
      "5058823529411764,0.9098039215686274,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0.6431372549019608,0.9058823529411765,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0.08627450980392157,0.7647058823529411,0.984313725490196,0."
      "6313725490196078,0.4980392156862745,0.5019607843137255,0."
      "4980392156862745,0.5294117647058824,0.9098039215686274,0,0,0,0,0,0,0,0,"
      "0.1254901960784314,0.5254901960784314,0.6627450980392157,0."
      "9921568627450981,0.9882352941176471,0.9882352941176471,0."
      "9882352941176471,0.9882352941176471,0.9921568627450981,0."
      "9882352941176471,0.9882352941176471,0.9254901960784314,0,0,0,0,0,0,0."
      "07058823529411765,0.5529411764705883,0.9098039215686274,0."
      "9882352941176471,0.9882352941176471,0.9921568627450981,0."
      "9882352941176471,0.9882352941176471,0.9882352941176471,0."
      "9882352941176471,0.9921568627450981,0.9882352941176471,0."
      "9568627450980393,0.4352941176470588,0,0.2745098039215687,0."
      "5803921568627451,0.3764705882352941,0.4470588235294118,0."
      "7529411764705882,1,0.9921568627450981,0.9803921568627451,0."
      "8274509803921568,0.6549019607843137,0.4196078431372549,0."
      "4156862745098039,0.03529411764705882,0,0.1764705882352941,0,0,0,0,0,0."
      "1137254901960784,0.6588235294117647,0.8235294117647058,0."
      "9882352941176471,0.9882352941176471,0.9921568627450981,0."
      "7411764705882353,0.2588235294117647,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0."
      "04313725490196078,0.08235294117647059,0.08235294117647059,0."
      "08235294117647059,0.0196078431372549,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0";
  EXPECT_TRUE(ParseLineMnist49(line, &example));
  EXPECT_EQ(-1, example.label);
  EXPECT_EQ(400, example.values.size());
  // Spot check features
  EXPECT_NEAR(0, example.values[0], kTolerance);
  EXPECT_NEAR(0.05882352941176471, example.values[49], kTolerance);
  EXPECT_NEAR(0.08627450980392157, example.values[50], kTolerance);
  line =
      "9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.1215686274509804,0.3098039215686275,0."
      "3372549019607843,0.6862745098039216,0.3372549019607843,0."
      "07058823529411765,0,0,0,0,0,0,0,0,0,0,0,0,0.1098039215686274,0."
      "5647058823529412,0.9450980392156862,0.996078431372549,0."
      "9921568627450981,0.9921568627450981,0.9921568627450981,0."
      "9333333333333333,0.2666666666666667,0,0,0,0,0,0,0,0,0,0,0."
      "3568627450980392,0.9215686274509803,0.9921568627450981,0."
      "9921568627450981,0.7568627450980392,0.3137254901960784,0."
      "6078431372549019,0.8156862745098039,0.9921568627450981,0."
      "9411764705882353,0.2666666666666667,0,0,0,0,0,0,0,0,0.05490196078431372,"
      "0.8784313725490196,0.996078431372549,0.996078431372549,0."
      "8156862745098039,0,0,0,0.1568627450980392,0.996078431372549,1,0."
      "6196078431372549,0,0,0,0,0,0,0,0,0.5843137254901961,0.9921568627450981,"
      "0.9921568627450981,0.9921568627450981,0.7254901960784313,0."
      "03137254901960784,0,0,0.3333333333333333,0.9921568627450981,0."
      "996078431372549,0.5568627450980392,0,0,0,0,0,0,0,0,0.7568627450980392,0."
      "9921568627450981,0.9921568627450981,0.9921568627450981,0."
      "9921568627450981,0.3843137254901961,0,0,0.6509803921568628,0."
      "9921568627450981,0.5686274509803921,0.04705882352941176,0,0,0,0,0,0,0,0,"
      "0.0196078431372549,0.07450980392156863,0.6509803921568628,0."
      "9921568627450981,0.9921568627450981,0.8588235294117647,0."
      "7137254901960784,0.9176470588235294,0.984313725490196,0."
      "7254901960784313,0.03137254901960784,0,0,0,0,0,0,0,0,0,0,0,0."
      "07058823529411765,0.9333333333333333,0.9921568627450981,0."
      "996078431372549,0.9921568627450981,0.9921568627450981,0."
      "9294117647058824,0.1411764705882353,0,0,0,0,0,0,0,0,0,0,0,0,0,0."
      "4509803921568628,0.9058823529411765,1,0.996078431372549,0."
      "996078431372549,0.996078431372549,0.8470588235294118,0.5254901960784314,"
      "0.03529411764705882,0,0,0,0,0,0,0,0,0,0,0,0.02352941176470588,0."
      "09411764705882353,0.788235294117647,0.7490196078431373,0."
      "5294117647058824,0.9254901960784314,0.9921568627450981,0."
      "996078431372549,0.6862745098039216,0.3450980392156863,0."
      "007843137254901961,0,0,0,0,0,0,0,0,0,0,0,0.07058823529411765,0."
      "04705882352941176,0,0.1647058823529412,0.596078431372549,0."
      "8745098039215686,0.9921568627450981,0.9921568627450981,0."
      "6509803921568628,0.1882352941176471,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0."
      "1372549019607843,0.6313725490196078,0.8862745098039215,0."
      "9921568627450981,0.9607843137254902,0.4509803921568628,0."
      "08235294117647059,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.07058823529411765,0."
      "4941176470588236,0.9921568627450981,0.996078431372549,0."
      "8549019607843137,0.1176470588235294,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0."
      "1490196078431373,0.6745098039215687,0.996078431372549,0.996078431372549,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.03529411764705882,0."
      "1803921568627451,0.6470588235294118,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0";
  EXPECT_TRUE(ParseLineMnist49(line, &example));
  EXPECT_EQ(1, example.label);
  line =
      "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0."
      "0392156862745098,0.0196078431372549,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0."
      "2392156862745098,0.5529411764705883,0.8431372549019608,0."
      "7764705882352941,0,0,0,0,0,0,0,0,0,0,0,0,0.09411764705882353,0."
      "4705882352941176,0.592156862745098,0.8941176470588236,0.984313725490196,"
      "0.996078431372549,0.996078431372549,0.6901960784313725,0,0,0,0,0,0,0,0,"
      "0,0.2235294117647059,0.4862745098039216,0.6705882352941176,0."
      "9098039215686274,0.996078431372549,0.996078431372549,0.996078431372549,"
      "0.996078431372549,0.803921568627451,0.4745098039215686,0."
      "0392156862745098,0,0,0,0,0,0,0.1254901960784314,0.3725490196078431,0."
      "5490196078431373,0.9294117647058824,1,0.996078431372549,0."
      "8431372549019608,0.6235294117647059,0.5568627450980392,0."
      "2588235294117647,0.2588235294117647,0.01176470588235294,0,0,0,0,0,0."
      "1764705882352941,0.3294117647058823,0.792156862745098,0.996078431372549,"
      "0.996078431372549,0.996078431372549,0.803921568627451,0."
      "6470588235294118,0.3176470588235294,0,0,0,0,0,0,0,0,0.1490196078431373,"
      "0.3411764705882353,0.5294117647058824,0.9568627450980393,0."
      "996078431372549,0.8745098039215686,0.8470588235294118,0."
      "7647058823529411,0.3019607843137255,0.03137254901960784,0,0,0,0,0,0,0,0,"
      "0,0,0.996078431372549,0.9882352941176471,0.9450980392156862,0."
      "5882352941176471,0.2470588235294118,0.04313725490196078,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0.4274509803921568,0.3215686274509804,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,"
      "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0";
  EXPECT_FALSE(ParseLineMnist49(line, &example));
}

TEST_F(IoTest, ParseLinePimaTest) {
  Example example;
  string line = "6,148,72,35,0,33.6,0.627,50,1";
  EXPECT_TRUE(ParseLinePima(line, &example));
  EXPECT_EQ(1, example.label);
  EXPECT_EQ(8, example.values.size());
  // Spot check features
  EXPECT_NEAR(6, example.values[0], kTolerance);
  EXPECT_NEAR(0.627, example.values[6], kTolerance);
  line = "1,85,66,29,0,26.6,0.351,31,0";
  EXPECT_TRUE(ParseLinePima(line, &example));
  EXPECT_EQ(-1, example.label);
}

TEST_F(IoTest, ReadDataTest) {
  FLAGS_data_set = "breastcancer";
  FLAGS_data_filename = "./testdata/breast-cancer-wisconsin.data";
  FLAGS_num_folds = 4;
  FLAGS_fold_to_cv = 1;
  FLAGS_fold_to_test = 0;
  srand(123456);

  vector<Example> train_examples, cv_examples, test_examples;
  ReadData(&train_examples, &cv_examples, &test_examples);
  EXPECT_EQ(2, train_examples.size());
  EXPECT_EQ(1, cv_examples.size());
  EXPECT_EQ(1, test_examples.size());
  EXPECT_NEAR(0.5, train_examples[0].weight, kTolerance);
  EXPECT_NEAR(0.5, train_examples[1].weight, kTolerance);
}

TEST_F(IoTest, ReadDataTestWithNoise) {
  FLAGS_data_set = "breastcancer";
  FLAGS_data_filename = "./testdata/breast-cancer-wisconsin.data";
  FLAGS_num_folds = 4;
  FLAGS_fold_to_cv = 1;
  FLAGS_fold_to_test = 0;
  FLAGS_noise_prob = 0;
  srand(123456);

  vector<Example> train_examples, cv_examples, test_examples;
  ReadData(&train_examples, &cv_examples, &test_examples);
  Label train_label_0 = train_examples[0].label;
  Label train_label_1 = train_examples[1].label;
  Label cv_label_0 = cv_examples[0].label;
  Label test_label_0 = test_examples[0].label;

  FLAGS_noise_prob = 1;
  ReadData(&train_examples, &cv_examples, &test_examples);
  EXPECT_EQ(-train_label_0, train_examples[0].label);
  EXPECT_EQ(-train_label_1, train_examples[1].label);
  EXPECT_EQ(-cv_label_0, cv_examples[0].label);
  EXPECT_EQ(-test_label_0, test_examples[0].label);

  FLAGS_noise_prob = 0.5;
  const int kIterations = 100;
  double sum_labels = 0.0;
  for (int i = 0; i < kIterations; ++i) {
    ReadData(&train_examples, &cv_examples, &test_examples);
    sum_labels += train_examples[0].label;
    sum_labels += train_examples[1].label;
    sum_labels += cv_examples[0].label;
    sum_labels += test_examples[0].label;
  }
  // The average of uniformly random +1/-1 labels should be about 0
  EXPECT_NEAR(0, sum_labels / (4 * kIterations), 1e-2);
}
